fn друк_вектора(вектор: &[u32]) {
    for елемент in вектор {
        print!("{} ", елемент);
    }
    println!();
}

fn обчислити_середнє(дані: &[u32]) -> f32 {
    let сума: u32 = дані.iter().sum();
    сума as f32 / дані.len() as f32
}

fn згенерувати_розподіл(дані: &[u32]) -> Vec<u32> {
    let середнє = обчислити_середнє(дані);
    vec![середнє.floor() as u32; дані.len()]
}

fn згенерувати_розподіл_плюс(дані: &[u32]) -> Vec<u32> {
    let середнє = обчислити_середнє(дані);
    let базове = середнє.floor() as u32;
    let залишок = середнє.fract();
    let mut результат = Vec::with_capacity(дані.len());

    let mut накопичене = 0.0;

    for _ in 0..дані.len() {
        накопичене += залишок;
        let додаток = if накопичене >= 1.0 {
            накопичене -= 1.0;
            1
        } else {
            0
        };
        результат.push(базове + додаток);
    }

    результат
}

fn main() {
    let приклади: [Vec<u32>; 5] = [
        vec![1, 3, 3],
        vec![3, 6, 1, 3, 9, 0, 2],
        vec![8, 1, 32, 2, 1, 1, 2],
        vec![8, 2, 3, 2, 9, 5],
        vec![1, 555],
    ];

    for набір in приклади.iter() {
        println!("Початкові дані:");
        друк_вектора(набір);

        println!("Базовий розподіл:");
        друк_вектора(&згенерувати_розподіл(набір));

        println!("Покращений розподіл:");
        друк_вектора(&згенерувати_розподіл_плюс(набір));

        println!("------------------------------");
    }
}
